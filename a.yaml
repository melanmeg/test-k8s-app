clusterName: kubernetes-default
clusterDomain: cluster.local

operator:
  name: keda-operator
  revisionHistoryLimit: 10
  replicaCount: 1
  disableCompression: true

metricsServer:
  revisionHistoryLimit: 10
  replicaCount: 1
  disableCompression: true
  dnsPolicy: ClusterFirst
  useHostNetwork: false

webhooks:
  enabled: true
  port: ""
  healthProbePort: 8081
  useHostNetwork: false
  name: keda-admission-webhooks
  revisionHistoryLimit: 10
  replicaCount: 1
  failurePolicy: Ignore

rbac:
  create: true
  aggregateToDefaultRoles: false
  enabledCustomScaledRefKinds: true
  controlPlaneServiceAccountsNamespace: kube-system
  scaledRefKinds:
    - apiGroup: "*"
      kind: "*"

serviceAccount:
  operator:
    # -- Specifies whether a service account should be created
    create: true
    # -- The name of the service account to use.
    name: keda-operator
    # -- Specifies whether a service account should automount API-Credentials
    automountServiceAccountToken: true
    # -- Annotations to add to the service account
    annotations: {}
  metricServer:
    # -- Specifies whether a service account should be created
    create: true
    # -- The name of the service account to use.
    name: keda-metrics-server
    # -- Specifies whether a service account should automount API-Credentials
    automountServiceAccountToken: true
    # -- Annotations to add to the service account
    annotations: {}
  webhooks:
    # -- Specifies whether a service account should be created
    create: true
    # -- The name of the service account to use.
    name: keda-webhook
    # -- Specifies whether a service account should automount API-Credentials
    automountServiceAccountToken: true
    # -- Annotations to add to the service account
    annotations: {}

podIdentity:
  azureWorkload:
    # -- Set to true to enable Azure Workload Identity usage.
    # See https://keda.sh/docs/concepts/authentication/#azure-workload-identity
    # This will be set as a label on the KEDA service account.
    enabled: false
    # Set to the value of the Azure Active Directory Client and Tenant Ids
    # respectively. These will be set as annotations on the KEDA service account.
    # -- Id of Azure Active Directory Client to use for authentication with Azure Workload Identity. ([docs](https://keda.sh/docs/concepts/authentication/#azure-workload-identity))
    clientId: ""
    # -- Id Azure Active Directory Tenant to use for authentication with for Azure Workload Identity. ([docs](https://keda.sh/docs/concepts/authentication/#azure-workload-identity))
    tenantId: ""
    # Set to the value of the service account token expiration duration.
    # This will be set as an annotation on the KEDA service account.
    # -- Duration in seconds to automatically expire tokens for the service account. ([docs](https://keda.sh/docs/concepts/authentication/#azure-workload-identity))
    tokenExpiration: 3600
  aws:
    irsa:
      # -- Specifies whether [AWS IAM Roles for Service Accounts (IRSA)](https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html) is to be enabled or not.
      enabled: false
      # -- Sets the token audience for IRSA.
      # This will be set as an annotation on the KEDA service account.
      audience: "sts.amazonaws.com"
      # -- Set to the value of the ARN of an IAM role with a web identity provider.
      # This will be set as an annotation on the KEDA service account.
      roleArn: ""
      # -- Sets the use of an STS regional endpoint instead of global.
      # Recommended to use regional endpoint in almost all cases.
      # This will be set as an annotation on the KEDA service account.
      stsRegionalEndpoints: "true"
      # -- Set to the value of the service account token expiration duration.
      # This will be set as an annotation on the KEDA service account.
      tokenExpiration: 86400
  gcp:
    # -- Set to true to enable GCP Workload Identity.
    # See https://keda.sh/docs/2.10/authentication-providers/gcp-workload-identity/
    # This will be set as a annotation on the KEDA service account.
    enabled: false
    # -- GCP IAM Service Account Email which you would like to use for workload identity.
    gcpIAMServiceAccount: ""

logging:
  operator:
    # -- Logging level for KEDA Operator.
    # allowed values: `debug`, `info`, `error`, or an integer value greater than 0, specified as string
    level: info
    # -- Logging format for KEDA Operator.
    # allowed values: `json` or `console`
    format: console
    # -- Logging time encoding for KEDA Operator.
    # allowed values are `epoch`, `millis`, `nano`, `iso8601`, `rfc3339` or `rfc3339nano`
    timeEncoding: rfc3339
    # -- If enabled, the stack traces will be also printed
    stackTracesEnabled: false
  metricServer:
    # -- Logging level for Metrics Server.
    # allowed values: `0` for info, `4` for debug, or an integer value greater than 0, specified as string
    level: 0
    # -- Logging stderrthreshold for Metrics Server
    # allowed values: 'DEBUG','INFO','WARN','ERROR','ALERT','EMERG'
    stderrthreshold: ERROR
  webhooks:
    # -- Logging level for KEDA Operator.
    # allowed values: `debug`, `info`, `error`, or an integer value greater than 0, specified as string
    level: info
    # -- Logging format for KEDA Admission webhooks.
    # allowed values: `json` or `console`
    format: console
    # -- Logging time encoding for KEDA Operator.
    # allowed values are `epoch`, `millis`, `nano`, `iso8601`, `rfc3339` or `rfc3339nano`
    timeEncoding: rfc3339

# -- [Security context] for all containers
# @default -- [See below](#KEDA-is-secure-by-default)
securityContext:
  # -- [Security context] of the operator container
  # @default -- [See below](#KEDA-is-secure-by-default)
  operator:
    capabilities:
      drop:
        - ALL
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    seccompProfile:
      type: RuntimeDefault
  # -- [Security context] of the metricServer container
  # @default -- [See below](#KEDA-is-secure-by-default)
  metricServer:
    capabilities:
      drop:
        - ALL
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    seccompProfile:
      type: RuntimeDefault
  # -- [Security context] of the admission webhooks container
  # @default -- [See below](#KEDA-is-secure-by-default)
  webhooks:
    capabilities:
      drop:
        - ALL
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    seccompProfile:
      type: RuntimeDefault

# --  [Pod security context] for all pods
# @default -- [See below](#KEDA-is-secure-by-default)
podSecurityContext:
  # -- [Pod security context] of the KEDA operator pod
  # @default -- [See below](#KEDA-is-secure-by-default)
  operator:
    runAsNonRoot: true
    # runAsUser: 1000
    # runAsGroup: 1000
    # fsGroup: 1000

  # -- [Pod security context] of the KEDA metrics apiserver pod
  # @default -- [See below](#KEDA-is-secure-by-default)
  metricServer:
    runAsNonRoot: true
    # runAsUser: 1000
    # runAsGroup: 1000
    # fsGroup: 1000

  # -- [Pod security context] of the KEDA admission webhooks
  # @default -- [See below](#KEDA-is-secure-by-default)
  webhooks:
    runAsNonRoot: true
    # runAsUser: 1000
    # runAsGroup: 1000
    # fsGroup: 1000

service:
  # -- KEDA Metric Server service type
  type: ClusterIP
  # -- HTTPS port for KEDA Metric Server service
  portHttps: 443
  # -- HTTPS port for KEDA Metric Server container
  portHttpsTarget: 6443
  # -- Annotations to add the KEDA Metric Server service
  annotations: {}

# We provides the default values that we describe in our docs:
# https://keda.sh/docs/latest/operate/cluster/
# If you want to specify the resources (or totally remove the defaults), change or comment the following
# lines, adjust them as necessary, or simply add the curly braces after 'operator' and/or 'metricServer'
# and remove/comment the default values
resources:
  # -- Manage [resource request & limits] of KEDA operator pod
  operator:
    limits:
      cpu: 1
      memory: 1000Mi
    requests:
      cpu: 100m
      memory: 100Mi
  # -- Manage [resource request & limits] of KEDA metrics apiserver pod
  metricServer:
    limits:
      cpu: 1
      memory: 1000Mi
    requests:
      cpu: 100m
      memory: 100Mi
  # -- Manage [resource request & limits] of KEDA admission webhooks pod
  webhooks:
    limits:
      cpu: 1
      memory: 1000Mi
    requests:
      cpu: 100m
      memory: 100Mi

topologySpreadConstraints:
  # -- [Pod Topology Constraints] of KEDA operator pod
  operator: []
  # -- [Pod Topology Constraints] of KEDA metrics apiserver pod
  metricsServer: []
  # -- [Pod Topology Constraints] of KEDA admission webhooks pod
  webhooks: []

http:
  timeout: 3000
  keepAlive:
    enabled: true
  minTlsVersion: TLS12

prometheus:
  metricServer:
    # -- Enable metric server Prometheus metrics expose
    enabled: false
    # -- HTTP port used for exposing metrics server prometheus metrics
    port: 8080
    # -- HTTP port name for exposing metrics server prometheus metrics
    portName: metrics
    # -- App Protocol for service when scraping metrics endpoint
    # appProtocol: http
    serviceMonitor:
      # -- Enables ServiceMonitor creation for the Prometheus Operator
      enabled: false
      # -- JobLabel selects the label from the associated Kubernetes service which will be used as the job label for all metrics. [ServiceMonitor Spec]
      jobLabel: ""
      # -- TargetLabels transfers labels from the Kubernetes `Service` onto the created metrics
      targetLabels: []
      # -- PodTargetLabels transfers labels on the Kubernetes `Pod` onto the created metrics
      podTargetLabels: []
      # -- Name of the service port this endpoint refers to. Mutually exclusive with targetPort
      port: metrics
      # -- Name or number of the target port of the Pod behind the Service, the port must be specified with container port property. Mutually exclusive with port
      targetPort: ""
      # -- Interval at which metrics should be scraped If not specified Prometheus’ global scrape interval is used.
      interval: ""
      # -- Timeout after which the scrape is ended If not specified, the Prometheus global scrape timeout is used unless it is less than Interval in which the latter is used
      scrapeTimeout: ""
      # -- DEPRECATED. List of expressions that define custom relabeling rules for metric server ServiceMonitor crd (prometheus operator). [RelabelConfig Spec]
      relabellings: []
      # -- List of expressions that define custom relabeling rules for metric server ServiceMonitor crd (prometheus operator). [RelabelConfig Spec]
      relabelings: []
      # -- List of expressions that define custom  metric relabeling rules for metric server ServiceMonitor crd after scrape has happened (prometheus operator). [RelabelConfig Spec]
      metricRelabelings: []
      # --  Additional labels to add for metric server using ServiceMonitor crd (prometheus operator)
      additionalLabels: {}
      # -- HTTP scheme used for scraping. Defaults to `http`
      scheme: http
      # -- TLS configuration for scraping metrics
      tlsConfig:
        {}
        # caFile: /etc/prom-certs/root-cert.pem
        # certFile: /etc/prom-certs/cert-chain.pem
        # insecureSkipVerify: true
        # keyFile: /etc/prom-certs/key.pem
    podMonitor:
      # -- Enables PodMonitor creation for the Prometheus Operator
      enabled: false
      # -- Scraping interval for metric server using podMonitor crd (prometheus operator)
      interval: ""
      # -- Scraping timeout for metric server using podMonitor crd (prometheus operator)
      scrapeTimeout: ""
      # -- Scraping namespace for metric server using podMonitor crd (prometheus operator)
      namespace: ""
      # -- Additional labels to add for metric server using podMonitor crd (prometheus operator)
      additionalLabels: {}
      # -- List of expressions that define custom relabeling rules for metric server podMonitor crd (prometheus operator)
      relabelings: []
      # -- List of expressions that define custom  metric relabeling rules for metric server PodMonitor crd after scrape has happened (prometheus operator). [RelabelConfig Spec]
      metricRelabelings: []
  operator:
    # -- Enable KEDA Operator prometheus metrics expose
    enabled: false
    # -- Port used for exposing KEDA Operator prometheus metrics
    port: 8080
    # -- App Protocol for service when scraping metrics endpoint
    # appProtocol: http
    serviceMonitor:
      # -- Enables ServiceMonitor creation for the Prometheus Operator
      enabled: false
      # -- JobLabel selects the label from the associated Kubernetes service which will be used as the job label for all metrics. [ServiceMonitor Spec]
      jobLabel: ""
      # -- TargetLabels transfers labels from the Kubernetes `Service` onto the created metrics
      targetLabels: []
      # -- PodTargetLabels transfers labels on the Kubernetes `Pod` onto the created metrics
      podTargetLabels: []
      # -- Name of the service port this endpoint refers to. Mutually exclusive with targetPort
      port: metrics
      # -- Name or number of the target port of the Pod behind the Service,
      # the port must be specified with container port property. Mutually exclusive with port
      targetPort: ""
      # -- Interval at which metrics should be scraped If not specified Prometheus’ global scrape interval is used.
      interval: ""
      # -- Timeout after which the scrape is ended If not specified, the Prometheus global scrape timeout is used unless it is less than Interval in which the latter is used
      scrapeTimeout: ""
      # -- DEPRECATED. List of expressions that define custom relabeling rules for metric server ServiceMonitor crd (prometheus operator). [RelabelConfig Spec]
      relabellings: []
      # -- List of expressions that define custom relabeling rules for metric server ServiceMonitor crd (prometheus operator). [RelabelConfig Spec]
      relabelings: []
      # -- List of expressions that define custom  metric relabeling rules for metric server ServiceMonitor crd after scrape has happened (prometheus operator). [RelabelConfig Spec]
      metricRelabelings: []
      # -- Additional labels to add for metric server using ServiceMonitor crd (prometheus operator)
      additionalLabels: {}
      # -- HTTP scheme used for scraping. Defaults to `http`
      scheme: http
      # -- TLS configuration for scraping metrics
      tlsConfig:
        {}
        # caFile: /etc/prom-certs/root-cert.pem
        # certFile: /etc/prom-certs/cert-chain.pem
        # insecureSkipVerify: true
        # keyFile: /etc/prom-certs/key.pem
    podMonitor:
      # -- Enables PodMonitor creation for the Prometheus Operator
      enabled: false
      # -- Scraping interval for KEDA Operator using podMonitor crd (prometheus operator)
      interval: ""
      # -- Scraping timeout for KEDA Operator using podMonitor crd (prometheus operator)
      scrapeTimeout: ""
      # -- Scraping namespace for KEDA Operator using podMonitor crd (prometheus operator)
      namespace: ""
      # -- Additional labels to add for KEDA Operator using podMonitor crd (prometheus operator)
      additionalLabels: {}
      # --  List of expressions that define custom relabeling rules for KEDA Operator podMonitor crd (prometheus operator)
      relabelings: []
      # -- List of expressions that define custom  metric relabeling rules for metric server PodMonitor crd after scrape has happened (prometheus operator). [RelabelConfig Spec]
      metricRelabelings: []
    prometheusRules:
      # -- Enables PrometheusRules creation for the Prometheus Operator
      enabled: false
      # -- Scraping namespace for KEDA Operator using prometheusRules crd (prometheus operator)
      namespace: ""
      # -- Additional labels to add for KEDA Operator using prometheusRules crd (prometheus operator)
      additionalLabels: {}
      # -- Additional alerts to add for KEDA Operator using prometheusRules crd (prometheus operator)
      alerts:
        []
        # - alert: KedaScalerErrors
        #   annotations:
        #     description: Keda scaledObject {{ $labels.scaledObject }} is experiencing errors with {{ $labels.scaler }} scaler
        #     summary: Keda Scaler {{ $labels.scaler }} Errors
        #   expr: sum by ( scaledObject , scaler) (rate(keda_metrics_adapter_scaler_errors[2m]))  > 0
        #   for: 2m
        #   labels:
  webhooks:
    # -- Enable KEDA admission webhooks prometheus metrics expose
    enabled: false
    # -- Port used for exposing KEDA admission webhooks prometheus metrics
    port: 8080
    # -- App Protocol for service when scraping metrics endpoint
    # appProtocol: http
    serviceMonitor:
      # -- Enables ServiceMonitor creation for the Prometheus webhooks
      enabled: false
      # -- jobLabel selects the label from the associated Kubernetes service which will be used as the job label for all metrics. [ServiceMonitor Spec]
      jobLabel: ""
      # -- TargetLabels transfers labels from the Kubernetes `Service` onto the created metrics
      targetLabels: []
      # -- PodTargetLabels transfers labels on the Kubernetes `Pod` onto the created metrics
      podTargetLabels: []
      # -- Name of the service port this endpoint refers to. Mutually exclusive with targetPort
      port: metrics
      # -- Name or number of the target port of the Pod behind the Service, the port must be specified with container port property. Mutually exclusive with port
      targetPort: ""
      # -- Interval at which metrics should be scraped If not specified Prometheus’ global scrape interval is used.
      interval: ""
      # -- Timeout after which the scrape is ended If not specified, the Prometheus global scrape timeout is used unless it is less than Interval in which the latter is used
      scrapeTimeout: ""
      # -- DEPRECATED. List of expressions that define custom relabeling rules for metric server ServiceMonitor crd (prometheus operator). [RelabelConfig Spec]
      relabellings: []
      # -- List of expressions that define custom relabeling rules for metric server ServiceMonitor crd (prometheus operator). [RelabelConfig Spec]
      relabelings: []
      # -- List of expressions that define custom  metric relabeling rules for metric server ServiceMonitor crd after scrape has happened (prometheus operator). [RelabelConfig Spec]
      metricRelabelings: []
      # -- Additional labels to add for metric server using ServiceMonitor crd (prometheus operator)
      additionalLabels: {}
      # -- HTTP scheme used for scraping. Defaults to `http`
      scheme: http
      # -- TLS configuration for scraping metrics
      tlsConfig:
        {}
        # caFile: /etc/prom-certs/root-cert.pem
        # certFile: /etc/prom-certs/cert-chain.pem
        # insecureSkipVerify: true
        # keyFile: /etc/prom-certs/key.pem
    prometheusRules:
      # -- Enables PrometheusRules creation for the Prometheus Operator
      enabled: false
      # -- Scraping namespace for KEDA admission webhooks using prometheusRules crd (prometheus operator)
      namespace: ""
      # -- Additional labels to add for KEDA admission webhooks using prometheusRules crd (prometheus operator)
      additionalLabels: {}
      # -- Additional alerts to add for KEDA admission webhooks using prometheusRules crd (prometheus operator)
      alerts: []

opentelemetry:
  collector:
    # -- Uri of OpenTelemetry Collector to push telemetry to
    uri: ""
  operator:
    # -- Enable pushing metrics to an OpenTelemetry Collector for operator
    enabled: false

certificates:
  # -- Enables the self generation for KEDA TLS certificates inside KEDA operator
  autoGenerated: true
  # -- Secret name to be mounted with KEDA TLS certificates
  secretName: kedaorg-certs
  # -- Path where KEDA TLS certificates are mounted
  mountPath: /certs
  certManager:
    # -- Enables Cert-manager for certificate management
    enabled: false
    # -- Certificate duration
    duration: 8760h0m0s # 1 year
    # -- Certificate renewal time before expiration
    renewBefore: 5840h0m0s # 8 months
    # -- Generates a self-signed CA with Cert-manager.
    # If generateCA is false, the secret with the CA
    # has to be annotated with `cert-manager.io/allow-direct-injection: "true"`
    generateCA: true
    # -- Secret name where the CA is stored (generatedby cert-manager or user given)
    caSecretName: "kedaorg-ca"
    # -- Add labels/annotations to secrets created by Certificate resources
    # [docs](https://cert-manager.io/docs/usage/certificate/#creating-certificate-resources)
    secretTemplate:
      {}
      # annotations:
      #   my-secret-annotation-1: "foo"
      #   my-secret-annotation-2: "bar"
      # labels:
      #   my-secret-label: foo
    # -- Reference to custom Issuer. If issuer.generate is false, then issuer.group, issuer.kind and issuer.name are required
    issuer:
      # -- Generates an Issuer resource with Cert-manager
      generate: true
      # -- Custom Issuer name. Required when generate: false
      name: foo-org-ca
      # -- Custom Issuer kind. Required when generate: false
      kind: ClusterIssuer
      # -- Custom Issuer group. Required when generate: false
      group: cert-manager.io
